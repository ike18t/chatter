[project]
name = "chatter"
version = "0.1.0"
description = "Voice AI Assistant with push-to-talk functionality using HuggingFace Transformers and Kokoro TTS"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "kokoro>=0.9.2",
    "gradio>=5.38.0",
    "numpy>=2.2.6",
    "transformers>=4.41.0",
    "torch>=2.3.0",
    "accelerate>=0.31.0",
    "python-dotenv>=1.0.0",
    "openai-whisper>=20250625",
    "requests>=2.31.0",
    "scipy>=1.16.0",
    "sounddevice>=0.5.2",
    "soundfile>=0.12.0",
    "speechrecognition>=3.14.3",
    "pip>=25.1.1",
    "pyright>=1.1.390",
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
]

[project.scripts]
chatter = "chatter.main:main"
test = "pytest:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pyright]
# Basic configuration
pythonVersion = "3.13"
pythonPlatform = "All"
typeCheckingMode = "strict"

# Include/exclude paths
include = ["src", "tests"]
exclude = ["**/__pycache__", "**/.DS_Store"]

# Reporting settings
reportMissingImports = true
reportMissingTypeStubs = "warning"
reportUntypedFunctionDecorator = "error"
reportUntypedClassDecorator = "error"
reportUntypedBaseClass = "error"
reportUntypedNamedTuple = "error"
reportPrivateUsage = "warning"
reportConstantRedefinition = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportInconsistentConstructor = "error"
reportOverlappingOverloads = "error"
reportMissingParameterType = "error"
reportMissingReturnType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnknownMemberType = "warning"
reportMissingTypeArgument = "error"
reportInvalidTypeVarUse = "error"
reportCallInDefaultInitializer = "error"
reportUnnecessaryIsInstance = "warning"
reportUnnecessaryCast = "warning"
reportUnnecessaryComparison = "warning"
reportAssertAlwaysTrue = "warning"
reportSelfClsParameterName = "error"
reportImplicitStringConcatenation = "warning"
reportUndefinedVariable = "error"
reportUnboundVariable = "error"
reportInvalidStubStatement = "error"
reportUnsupportedDunderAll = "error"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
reportUnusedCoroutine = "error"

# Disable some overly strict checks for our use case
reportUnknownArgumentType = "warning"  # Third-party libraries often lack stubs
reportUnknownLambdaType = "warning"    # Lambdas can be hard to type
reportImportCycles = "warning"         # Sometimes unavoidable in complex projects

# Enable some helpful additional checks
reportShadowedImports = "error"
reportDuplicateImport = "error"
reportWildcardImportFromLibrary = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"

# Stub configuration
stubPath = "./typings"  # For custom stub files if needed

[dependency-groups]
dev = [
    "ruff>=0.12.4",
]

[tool.ruff]
# Basic configuration
target-version = "py313"
line-length = 88
indent-width = 4

# Include/exclude paths
include = ["src/**/*.py", "tests/**/*.py"]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable sensible rule sets
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "SIM", # flake8-simplify
    "I",   # isort
    "N",   # pep8-naming
    "C4",  # flake8-comprehensions
    "PIE", # flake8-pie
    "T20", # flake8-print
    "RET", # flake8-return
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PL",  # pylint
    "TRY", # tryceratops
]

# Ignore specific rules that may conflict with our codebase
ignore = [
    "E501",   # Line too long (handled by formatter)
    "T201",   # Print statements (we use them for debugging)
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR0911", # Too many return statements
    "TRY003",  # Avoid specifying long messages outside exception class
    "TRY300",  # Consider moving statements to else blocks - conflicts with readable patterns
    "B008",    # Do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["PLR2004"]  # Allow magic values in test assertions
"src/**" = ["PLC0415"]  # Allow imports inside functions for optional dependencies

[tool.ruff.format]
# Formatting configuration
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
docstring-code-format = true

[tool.ruff.lint.isort]
# Import sorting
known-first-party = ["chatter"]
force-single-line = false
lines-after-imports = 2
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[tool.ruff.lint.pylint]
# Pylint-specific settings
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60
